#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Aug 31, 2017 07:27:26 PM


import sys
from conexion import Conexion

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global combobox
    combobox = StringVar()

def conectar():
    print('principal_support.conectar')
    funcion=w.funcionCombo.get()

    if(funcion=="3"):
        conectado = conexion.conexion_puerto_funcion03(puerto=w.puertoEntry.get(), baudrate=w.baudiosEntry.get(),
                                         timeout=w.timeoutEntry.get(),
                                         intentos=w.intentosEntry.get(), funcion=funcion,
                                         dispositivo=w.dispositivoEntry.get(),
                                         direccion=w.direccionEntry.get(), cantidadRegistros=w.variablesEntry.get())
        if (conectado):
            w.estadoLabel.config(text='Conectado')
            conexion.obtenerRespuestas_funcion03()
        else:
            w.estadoLabel.config(text='Error al conectar')

    if(funcion=="6"):
        conectado=conexion.conexion_puerto_funcion06(puerto=w.puertoEntry.get(),baudrate=w.baudiosEntry.get(),timeout=w.timeoutEntry.get(),
                                                     intentos=w.intentosEntry.get(),dispositivo=w.dispositivoEntry.get(),funcion=funcion,
                                                     direccion=w.direccionEntry.get(),variable=w.EntryVariable1.get())
        if (conectado):
            w.estadoLabel.config(text='Conectado')
            conexion.obtenerRespuestas_funcion06()
        else:
            w.estadoLabel.config(text='Error al conectar')

    if(funcion=="16"):
        conectado = conexion.conexion_puerto_funcion16(puerto=w.puertoEntry.get(), baudrate=w.baudiosEntry.get(),
                                                           timeout=w.timeoutEntry.get(),intentos=w.intentosEntry.get(),
                                                           registros=w.variablesEntry.get(),dispositivo=w.dispositivoEntry.get(),
                                                           funcion=funcion,direccion=w.direccionEntry.get(),
                                                           variable1=w.EntryVariable1.get(),variable2=w.EntryVariable2.get(),
                                                           variable3=w.EntryVariable3.get(),variable4=w.EntryVariable4.get())
        print(conectado)
        if (conectado):
            w.estadoLabel.config(text='Conectado')
            conexion.obtenerRespuestas_funcion16()
        else:
            w.estadoLabel.config(text='Error al conectar')
    sys.stdout.flush()

def convertirBinario():
    print('principal_support.convertirBinario')
    conexion.imprimirRespuesta(conexion.datosBinario)
    sys.stdout.flush()

def convertirDecimal():
    print('principal_support.convertirDecimal')
    conexion.imprimirRespuesta(conexion.datosDecimal)
    sys.stdout.flush()

def convertirHexadecimal():
    print('principal_support.convertirHexadecimal')
    conexion.imprimirRespuesta(conexion.datosHexadecimal)
    sys.stdout.flush()

def desconectar():
    print('principal_support.desconectar')
    desconectar=conexion.desconectarpuerto()
    if(desconectar):
        w.puertoEntry.delete(0,END)
        w.dispositivoEntry.delete(0,END)
        w.puertoEntry.delete(0, END)
        w.direccionEntry.delete(0, END)
        w.funcionCombo.delete(0, END)
        w.timeoutEntry.delete(0, END)
        w.intentosEntry.delete(0, END)
        w.baudiosEntry.delete(0, END)
        w.variablesEntry.delete(0, END)
        w.EntryVariable1.delete(0, END)
        w.EntryVariable2.delete(0, END)
        w.EntryVariable3.delete(0, END)
        w.EntryVariable4.delete(0, END)
        w.Scrolledlistbox1.delete(0,END)
        w.Scrolledlistbox2.delete(0, END)
        w.Scrolledlistbox3.delete(0, END)
        w.estadoLabel.config(text='Desconectado')
        conexion.datosDecimal=[]
        conexion.datosHexadecimal=[]
        conexion.datosBinario=[]
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, conexion
    w = gui
    top_level = top
    root = top
    conexion = Conexion(gui=w)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import principal
    principal.vp_start_gui()


